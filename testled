#!/usr/bin/python

import RPi.GPIO as IO
import time
import sys
import serial

# Remember pins 0 and 1 on a rev 1 board are 2 and 3 on
# a rev 2 board. Are you still playing with rev 1 boards ?
# You bet I am.
ser_ctrl = [17,18,4,1,0]
ios = [10,9,25,11,8,7,21,22,23,24]
blink_rate = 0.2
# Pin definitions for the LTC2870 chip
enable_232 = 4
dxen = 17
hf = 1
lb = 0
te485 = 18

FULL_DUPLEX = 1
HALF_DUPLEX = 2
ENABLE_TERMINATION = 1
DISABLE_TERMINATION = 2

#
# Function for enabling the 120 ohm termination
# resistor onboard the LTC2870 serial driver chip
#
def enable_rs485_termination ():
	IO.output (hf, IO.HIGH)

# 
# Function for disabling the 120 ohm termination
# resistor onboard the LTC2870 serial driver chip
#
def disable_rs485_termination ():
	IO.output (hf, IO.LOW)

#
# Enable LTC2870 output drivers
#
def enable_drivers ():
	IO.output (dxen, IO.HIGH)

#
# Disable LTC2870 output drivers and put them in high
# impedance state
#
def disable_drivers ():
	IO.output (dxen, IO.LOW)

#
# Enable the internal LTC2870 loop back function
#
def enable_loopback ():
	IO.output (lb, IO.HIGH)

#
# Disable the internal LTC2870 loop back function
#
def disable_loopback ():
	IO.output (lb, IO.LOW)

#
# Put the LTC2870 in full duplex RS422 serial mode.
#
def enable_422_mode ():
	# Must set to 485
	IO.output (enable_232, IO.HIGH)
	IO.output (hf, IO.LOW)

	enable_drivers ()
	disable_loopback ()
	disable_rs485_termination ()

#
# Put the LTC2870 in RS232 serial mode
#
def enable_232_mode ():
	# Enable RS232
	IO.output (enable_232, IO.LOW)

	disable_loopback ()
	enable_drivers()

#
# Put the LTC2870 in RS485 mode.
# With this call you can also set duplex and if you
# want to have the termination resistors enabled.
#
def enable_485_mode (duplex, termination):
	# Enable RS485 mode
	IO.output (enable_232, IO.HIGH)

	disable_loopback ()
	enable_drivers ()

	if duplex == FULL_DUPLEX:
		IO.output (hf, IO.LOW)
	else:
		IO.output (hf, IO.HIGH)

	if termination == ENABLE_TERMINATION:
		enable_rs485_termination ()
	else:
		disable_rs485_termination ()
	
def main(argv):
	IO.setmode (IO.BCM)
	IO.cleanup()

	ser = serial.Serial ('/dev/ttyAMA0', 115200)

	for io in ios:
		print "Setup IO %d" % (io)
		IO.setup (io, IO.OUT)

	for ctrl in ser_ctrl:
		print "Setup CTRL %d" % (ctrl)
		IO.setup (ctrl, IO.OUT)

	# Enable 232 mode per default
	enable_232_mode ()

	while 1:
		print "Setting IO's to high level"
		for io in ios:
			IO.output (io, IO.HIGH)

		ser.write ("AABBCCDDEEFF")
		time.sleep(blink_rate)

		print "Setting IO's to low level"
		for io in ios:
			IO.output (io, IO.LOW)

		ser.write ("001122334455")
		time.sleep(blink_rate)

try:
	if __name__ == "__main__":
		main(sys.argv[1:])
finally:
	print "Cleaning up after doing IO"
	IO.cleanup()
